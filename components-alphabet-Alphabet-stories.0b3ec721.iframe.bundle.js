"use strict";(self.webpackChunkgame=self.webpackChunkgame||[]).push([[132],{"./src/components/alphabet/Alphabet.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Alphabet_stories}),__webpack_require__("./node_modules/react/index.js");var cipher=__webpack_require__("./src/lib/cipher.ts"),Letter=__webpack_require__("./src/components/alphabet/Letter.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");let Alphabet=_ref=>{let{cipher,onChar,onDelete,onEnter,isRevealing}=_ref,onClick=(input,ariaLabel)=>{"ENTER"===input?onEnter():"DELETE"===input?onDelete():onChar(input,ariaLabel)};return(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)("div",{className:"mb-1 flex flex-wrap justify-center",children:["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"].map(key=>(0,jsx_runtime.jsx)(Letter.k,{alphabetLine:key,randomKey:cipher[key].guesses[0],onClick:onClick,isRevealing:isRevealing},key))})})},Alphabet_stories_cipher=(0,cipher.bf)(3),Alphabet_stories={title:"Alphabet",component:Alphabet},Default=()=>(0,jsx_runtime.jsx)(Alphabet,{cipher:Alphabet_stories_cipher,onChar:value=>console.log("onChar",value),onDelete:()=>console.log("onDelete"),onEnter:()=>console.log("onEnter"),isRevealing:!0}),__namedExportsOrder=["Default"]},"./src/lib/cipher.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{bf:()=>newCipher});let ALPHABET="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");function isOriginalPosition(shuffled,original){for(var i=0;i<shuffled.length;i++)if(shuffled[i]===original[i])return console.log("this letter is matching",i,original[i]),!0;return!1}function seededRandom(seed){let x=1e4*Math.sin(seed);return x-Math.floor(x)}let newCipher=seed=>{console.log("todays seed",seed);let whileCount=0,randomKey=[...ALPHABET].sort(()=>seededRandom(seed++)>.5?1:-1);for(;whileCount<10&&isOriginalPosition(randomKey,ALPHABET);)whileCount++,console.log("regenerating randomKey",randomKey),randomKey=[...ALPHABET].sort(()=>seededRandom(seed+whileCount)>.5?1:-1),console.log("trying with next seed whileCount",whileCount,seed);let cipher={};for(let index in ALPHABET){let i=parseInt(index,10);cipher[randomKey[i]]={decrypted:ALPHABET[i],guesses:[]}}return cipher}}}]);